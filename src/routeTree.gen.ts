/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SocialsRouteImport } from './routes/socials'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as BlogRouteRouteImport } from './routes/blog/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PortfolioIndexRouteImport } from './routes/portfolio/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as BlogSlugRouteImport } from './routes/blog/$slug'
import { Route as PortfolioProjectIdIndexRouteImport } from './routes/portfolio/$projectId/index'

const SocialsRoute = SocialsRouteImport.update({
  id: '/socials',
  path: '/socials',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRouteRoute = BlogRouteRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PortfolioIndexRoute = PortfolioIndexRouteImport.update({
  id: '/portfolio/',
  path: '/portfolio/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => BlogRouteRoute,
} as any)
const PortfolioProjectIdIndexRoute = PortfolioProjectIdIndexRouteImport.update({
  id: '/portfolio/$projectId/',
  path: '/portfolio/$projectId/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/socials': typeof SocialsRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/dashboard': typeof DashboardIndexRoute
  '/portfolio': typeof PortfolioIndexRoute
  '/portfolio/$projectId': typeof PortfolioProjectIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/socials': typeof SocialsRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/dashboard': typeof DashboardIndexRoute
  '/portfolio': typeof PortfolioIndexRoute
  '/portfolio/$projectId': typeof PortfolioProjectIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/socials': typeof SocialsRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/portfolio/': typeof PortfolioIndexRoute
  '/portfolio/$projectId/': typeof PortfolioProjectIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/about'
    | '/contact'
    | '/socials'
    | '/blog/$slug'
    | '/dashboard'
    | '/portfolio'
    | '/portfolio/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog'
    | '/about'
    | '/contact'
    | '/socials'
    | '/blog/$slug'
    | '/dashboard'
    | '/portfolio'
    | '/portfolio/$projectId'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/about'
    | '/contact'
    | '/socials'
    | '/blog/$slug'
    | '/dashboard/'
    | '/portfolio/'
    | '/portfolio/$projectId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRouteRoute: typeof BlogRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  SocialsRoute: typeof SocialsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  PortfolioIndexRoute: typeof PortfolioIndexRoute
  PortfolioProjectIdIndexRoute: typeof PortfolioProjectIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/socials': {
      id: '/socials'
      path: '/socials'
      fullPath: '/socials'
      preLoaderRoute: typeof SocialsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/portfolio/': {
      id: '/portfolio/'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof PortfolioIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/portfolio/$projectId/': {
      id: '/portfolio/$projectId/'
      path: '/portfolio/$projectId'
      fullPath: '/portfolio/$projectId'
      preLoaderRoute: typeof PortfolioProjectIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface BlogRouteRouteChildren {
  BlogSlugRoute: typeof BlogSlugRoute
}

const BlogRouteRouteChildren: BlogRouteRouteChildren = {
  BlogSlugRoute: BlogSlugRoute,
}

const BlogRouteRouteWithChildren = BlogRouteRoute._addFileChildren(
  BlogRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRouteRoute: BlogRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  SocialsRoute: SocialsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  PortfolioIndexRoute: PortfolioIndexRoute,
  PortfolioProjectIdIndexRoute: PortfolioProjectIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
