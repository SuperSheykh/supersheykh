/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SocialsRouteImport } from './routes/socials'
import { Route as PortfolioRouteImport } from './routes/portfolio'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as BlogRouteImport } from './routes/blog'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const SocialsRoute = SocialsRouteImport.update({
  id: '/socials',
  path: '/socials',
  getParentRoute: () => rootRouteImport,
} as any)
const PortfolioRoute = PortfolioRouteImport.update({
  id: '/portfolio',
  path: '/portfolio',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog': typeof BlogRoute
  '/contact': typeof ContactRoute
  '/portfolio': typeof PortfolioRoute
  '/socials': typeof SocialsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog': typeof BlogRoute
  '/contact': typeof ContactRoute
  '/portfolio': typeof PortfolioRoute
  '/socials': typeof SocialsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog': typeof BlogRoute
  '/contact': typeof ContactRoute
  '/portfolio': typeof PortfolioRoute
  '/socials': typeof SocialsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/blog' | '/contact' | '/portfolio' | '/socials'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/blog' | '/contact' | '/portfolio' | '/socials'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blog'
    | '/contact'
    | '/portfolio'
    | '/socials'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BlogRoute: typeof BlogRoute
  ContactRoute: typeof ContactRoute
  PortfolioRoute: typeof PortfolioRoute
  SocialsRoute: typeof SocialsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/socials': {
      id: '/socials'
      path: '/socials'
      fullPath: '/socials'
      preLoaderRoute: typeof SocialsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/portfolio': {
      id: '/portfolio'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof PortfolioRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BlogRoute: BlogRoute,
  ContactRoute: ContactRoute,
  PortfolioRoute: PortfolioRoute,
  SocialsRoute: SocialsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
