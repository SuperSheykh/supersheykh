/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SocialsRouteImport } from './routes/socials'
import { Route as PortfolioRouteImport } from './routes/portfolio'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as BlogRouteImport } from './routes/blog'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PortfolioProjectIdRouteImport } from './routes/portfolio.$projectId'
import { Route as BlogSlugRouteImport } from './routes/blog.$slug'

const SocialsRoute = SocialsRouteImport.update({
  id: '/socials',
  path: '/socials',
  getParentRoute: () => rootRouteImport,
} as any)
const PortfolioRoute = PortfolioRouteImport.update({
  id: '/portfolio',
  path: '/portfolio',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PortfolioProjectIdRoute = PortfolioProjectIdRouteImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => PortfolioRoute,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => BlogRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog': typeof BlogRouteWithChildren
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRoute
  '/portfolio': typeof PortfolioRouteWithChildren
  '/socials': typeof SocialsRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/portfolio/$projectId': typeof PortfolioProjectIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog': typeof BlogRouteWithChildren
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRoute
  '/portfolio': typeof PortfolioRouteWithChildren
  '/socials': typeof SocialsRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/portfolio/$projectId': typeof PortfolioProjectIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog': typeof BlogRouteWithChildren
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRoute
  '/portfolio': typeof PortfolioRouteWithChildren
  '/socials': typeof SocialsRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/portfolio/$projectId': typeof PortfolioProjectIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/blog'
    | '/contact'
    | '/dashboard'
    | '/portfolio'
    | '/socials'
    | '/blog/$slug'
    | '/portfolio/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blog'
    | '/contact'
    | '/dashboard'
    | '/portfolio'
    | '/socials'
    | '/blog/$slug'
    | '/portfolio/$projectId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blog'
    | '/contact'
    | '/dashboard'
    | '/portfolio'
    | '/socials'
    | '/blog/$slug'
    | '/portfolio/$projectId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BlogRoute: typeof BlogRouteWithChildren
  ContactRoute: typeof ContactRoute
  DashboardRoute: typeof DashboardRoute
  PortfolioRoute: typeof PortfolioRouteWithChildren
  SocialsRoute: typeof SocialsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/socials': {
      id: '/socials'
      path: '/socials'
      fullPath: '/socials'
      preLoaderRoute: typeof SocialsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/portfolio': {
      id: '/portfolio'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof PortfolioRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/portfolio/$projectId': {
      id: '/portfolio/$projectId'
      path: '/$projectId'
      fullPath: '/portfolio/$projectId'
      preLoaderRoute: typeof PortfolioProjectIdRouteImport
      parentRoute: typeof PortfolioRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof BlogRoute
    }
  }
}

interface BlogRouteChildren {
  BlogSlugRoute: typeof BlogSlugRoute
}

const BlogRouteChildren: BlogRouteChildren = {
  BlogSlugRoute: BlogSlugRoute,
}

const BlogRouteWithChildren = BlogRoute._addFileChildren(BlogRouteChildren)

interface PortfolioRouteChildren {
  PortfolioProjectIdRoute: typeof PortfolioProjectIdRoute
}

const PortfolioRouteChildren: PortfolioRouteChildren = {
  PortfolioProjectIdRoute: PortfolioProjectIdRoute,
}

const PortfolioRouteWithChildren = PortfolioRoute._addFileChildren(
  PortfolioRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BlogRoute: BlogRouteWithChildren,
  ContactRoute: ContactRoute,
  DashboardRoute: DashboardRoute,
  PortfolioRoute: PortfolioRouteWithChildren,
  SocialsRoute: SocialsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
